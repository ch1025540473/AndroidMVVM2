apply plugin: 'com.android.library'
apply plugin: 'maven'

android {
    compileSdkVersion 23
    buildToolsVersion "23.0.2"
    defaultPublishConfig 'release'

    defaultConfig {
        minSdkVersion 14
        targetSdkVersion 23
        versionCode 6
        versionName "1.0.5"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    provided project(':engine')
    provided project(':framework2')

    testCompile 'org.assertj:assertj-core:1.7.0'
    testCompile 'org.robolectric:robolectric:3.1-rc1'
    testCompile "org.robolectric:shadows-support-v4:3.0"
    testCompile "junit:junit:4.12"
    testCompile "org.mockito:mockito-all:1.10.19"
    testCompile "org.hamcrest:hamcrest-all:1.3"
}

def marvenUpload = {
    project ->
        uploadArchives {
            repositories.mavenDeployer {
                name = 'mavenCentralReleaseDeployer'
                repository(url: "http://10.69.213.71:8081/nexus/content/repositories/MXCentral/") {
                    authentication(userName: "admin", password: "mx123456")
                }
                pom.version = "1.0.7"
                pom.artifactId = "router-alpha"
                pom.groupId = "com.mx.architecture"
                pom.name = "router"
                pom.packaging = 'aar'
                pom.project {
                    description ""
                    url "http://10.69.213.71:8888/mx_android_architecture/AndroidMVVM/tree/master/router"
                }
            }
        }


        task androidJavadocs(type: Javadoc) {
            source = android.sourceSets.main.java.srcDirs
            classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
        }

        task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
            classifier = 'javadoc'
            from androidJavadocs.destinationDir
        }

        task androidSourcesJar(type: Jar) {
            classifier = 'sources'
            from android.sourceSets.main.java.sourceFiles
        }

        artifacts {
            archives androidSourcesJar
//  archives androidJavadocsJar
        }
}

//afterEvaluate marvenUpload