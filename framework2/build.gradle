apply plugin: 'com.android.library'
apply plugin: 'maven'

android {
    compileSdkVersion 23
    buildToolsVersion "23.0.3"

    defaultConfig {
        minSdkVersion 14
        targetSdkVersion 23
        versionCode 42
        versionName "1.1.1"
    }

    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
        }
    }

    dataBinding {
        enabled true
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }
    lintOptions {
        warning 'InvalidPackage'
        abortOnError false
    }

    dexOptions {
        incremental true
    }
    buildTypes {
        release {
            buildConfigField "boolean", "logger_debug", "false"
            zipAlignEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig null
        }
        debug {
            // 显示Log
            buildConfigField "boolean", "logger_debug", "true"
            minifyEnabled false
            zipAlignEnabled false
            shrinkResources false
            signingConfig null
        }
    }
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    compile 'com.android.support:multidex:1.0.1'
    compile 'com.android.support:appcompat-v7:23.+'
    compile 'com.android.support:recyclerview-v7:23.+'
    compile 'com.mx.architecture:pulltorefresh-alpha:1.+'
    compile 'me.kareluo.intensify:image:1.1.0'
    provided project(':engine')
    provided project(':activitystarter')
    testCompile 'org.assertj:assertj-core:1.7.0'
    testCompile "org.robolectric:robolectric:3.1.4"
    testCompile "org.robolectric:shadows-support-v4:3.0"

    testCompile "junit:junit:4.12"
    testCompile "org.mockito:mockito-all:1.10.19"
    testCompile "org.hamcrest:hamcrest-all:1.3"

    // Android Testing Support Library's runner and rules
    androidTestCompile "com.android.support.test:runner:0.4.1"
    androidTestCompile "com.android.support.test:rules:0.4.1"
}

def mavenUpload = { project ->
    uploadArchives {
        repositories.mavenDeployer {
            name = 'mavenCentralReleaseDeployer'
            repository(url: "http://10.69.213.71:8081/nexus/content/repositories/MXCentral/") {
                authentication(userName: "admin", password: "")
            }
            pom.version = "1.1.1"
            pom.artifactId = "framework2"
            pom.groupId = "com.mx.architecture"
            pom.name = "framework"
            pom.packaging = 'aar'
        }
    }

    task androidJavadocs(type: Javadoc) {
        source = android.sourceSets.main.java.srcDirs
        classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    }

    task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
        classifier = 'javadoc'
        from androidJavadocs.destinationDir
    }

    task androidSourcesJar(type: Jar) {
        classifier = 'sources'
        from android.sourceSets.main.java.sourceFiles
    }

    artifacts {
        archives androidSourcesJar
//  archives androidJavadocsJar
    }
}
//afterEvaluate mavenUpload

//android.testOptions.unitTests.all {
//    // configure the set of classes for JUnit tests
//    include '**/*Test.class'
//    //exclude '**/espresso/**/*.class'
//
//    // configure max heap size of the test JVM
//    maxHeapSize = "2048m"
//}
//apply plugin: 'jacoco'
//
//jacoco {
//    toolVersion = "0.7.1.201405082137"
//}
//
//def coverageSourceDirs = [
//        '../framework2/src/main/java'
//]
//
//task jacocoTestReport(type: JacocoReport, dependsOn: "test") {
//    group = "Reporting"
//
//    description = "Generate Jacoco coverage reports"
//
//    classDirectories = fileTree(
//            dir: '../framework2/build/intermediates/classes/debug',
//            excludes: ['**/R.class',
//                       '**/R$*.class',
//                       '**/*$ViewInjector*.*',
//                       '**/BuildConfig.*',
//                       '**/Manifest*.*']
//    )
//
//    additionalSourceDirs = files(coverageSourceDirs)
//    sourceDirectories = files(coverageSourceDirs)
//    executionData = files('../framework2/build/jacoco/testDebugUnitTest.exec')
//
//    reports {
//        xml.enabled = true
//        html.enabled = true
//    }
//
//}