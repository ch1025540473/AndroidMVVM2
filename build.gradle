// Top-level build file where you can add configuration options common to all sub-projects/modules.

configurations.all {
    classpath.resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}

buildscript {
    repositories {
        jcenter {
            url "http://10.69.213.71:8081/nexus/content/repositories/jcenter/"
        }
        maven {
            url 'http://10.69.213.71:8081/nexus/content/repositories/MXCentral/'
        }
        maven {
            url 'http://10.69.213.71:8081/nexus/content/repositories/snapshots/'
        }

    }
    dependencies {
        classpath 'com.android.tools.build:gradle:2.3.1'

        classpath('org.ow2.asm:asm:5.2')
        classpath('org.ow2.asm:asm-commons:5.2')
        classpath('org.ow2.asm:asm-util:5.2')

        classpath('com.tencent.tinker:tinker-patch-gradle-plugin:1.7.5')

        classpath('com.mx.architecture:gunit:0.0.2-SNAPSHOT') {
            changing = true
        }
        //classpath project(':gunit')

        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }

}



task clean(type: Delete) {
    delete rootProject.buildDir
}

allprojects {
    repositories {

        jcenter {
            url "http://10.69.213.71:8081/nexus/content/repositories/jcenter/"
        }

        maven {
            url "http://10.69.213.71:8081/nexus/content/repositories/gomeMaven/"
        }

        maven {
            url "http://10.69.213.71:8081/nexus/content/repositories/MXCentral/"
        }

        maven {
            url 'http://10.69.213.71:8081/nexus/content/repositories/snapshots/'
        }
    }

    ext {
        DEFAULT_COMPILE_SDK_VERSION = 24
        DEFAULT_BUILD_TOOLS_VERSION = '25.0.2'
    }
}

class MavenOptions {
    def artifactId
    def versionName
    def snapshot = false
    def groupId = 'com.mx.architecture'
    def packaging = 'aar'

    public String getVersionName() {
        if (snapshot) {
            return versionName + '-SNAPSHOT'
        }

        return versionName
    }

    @Override
    public String toString() {
        return String.format(
                "artifactId=%s, versionName=%s, snapshot=%s, groupId=%s, packaging=%s",
                artifactId, versionName, snapshot, groupId, packaging
        )
    }
}

subprojects {
    def nexusOptions = new MavenOptions()
    project.ext {
        maven = { c ->
            c.delegate = nexusOptions
            c()
        }
    }

    apply plugin: 'maven'
    def mavenUpload = { project ->
        delegate = project

        if (nexusOptions.artifactId == null || nexusOptions.versionName == null) {
            return;
        }

        def url;
        if (nexusOptions.snapshot) {
            url = 'http://10.69.213.71:8081/nexus/content/repositories/snapshots/'
        } else {
            url = 'http://10.69.213.71:8081/nexus/content/repositories/MXCentral/'
        }

        uploadArchives {
            repositories.mavenDeployer {
                //name = 'mavenCentralReleaseDeployer'
                repository(url: url) {
                    authentication(userName: "admin", password: "mx123456")
                }
                pom.version = nexusOptions.versionName
                pom.artifactId = nexusOptions.artifactId
                pom.groupId = nexusOptions.groupId
                pom.name = nexusOptions.artifactId
                pom.packaging = nexusOptions.packaging
            }
        }

        if (getExtensions().findByName('android') != null) {
            task androidJavadocs(type: Javadoc) {
                source = android.sourceSets.main.java.srcDirs
                classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
            }

            task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
                classifier = 'javadoc'
                from androidJavadocs.destinationDir
            }

            task androidSourcesJar(type: Jar) {
                classifier = 'sources'
                from android.sourceSets.main.java.sourceFiles
            }

            artifacts {
                archives androidSourcesJar
                //archives androidJavadocsJar
            }
        }
    }

    afterEvaluate mavenUpload
}